{"userStatusLines":{



	"com.mycompany.MyMonitor [nnn] MyApplication Status:": {
		// The prefix that will be added to all fields
		"fieldPrefix":"myApp.",
		// The field= names to extract from the log file, and an optional alias for each one
		"field:alias":{
			"kpi1":"",
			"kpi2":"kpi2AliasWithUnits",
			"kpi3":""
		}},
		
	"JMS Status:": {
		"fieldPrefix":"jms.",
		"field:alias":{
			"s":"s=senders",
			"r":"r=receivers",
			"rRate":"rx /sec",
			"sRate":"tx /sec",
			"rWindow":"receive window",
			"rRedel":"redelivered",
			"rMaxDeliverySecs":"",
			"rDupsDet":"",
			"rDupIds":"", 
			"connErr":"",
			"jvmMB":""
		}},
	# comment line
	// another comment line
	"      JMSReceiver myConnection-receiver-apama-queue-01:": {
		// deliberately use old keyXXX names as a test
		"keyPrefix":"jms.r.q1.",
		"key:alias":{
			"rRate":"rx /sec",
			"rWindow":"receive window",
			"rRedel":"redelivered",
			"rMaxDeliverySecs":"",
			"rDupsDet":"",
			"rDupIds":"", 
			"msgErrors":"",
			"jvmMB":"",
			
			// special values that can be added if needed
			"datetime":"",
			"epoch secs":"",
			"line num":""

		}},

	// JMS per-receiver detailed status lines
	"      JMSReceiver ": 
		{
	
		// The ?P<key> named group in this regular expression identifies the key for which a uniquely numbered set of columns will be created
		"keyRegex": " *(?P<key>[^ :]+): rx=",
		// Estimates the number of keys to allocate columns for; if more keys are required, the file will be reparsed with double the number
		"maxKeysToAllocateColumnsFor": 2, 

		"fieldPrefix":"jmsReceiver.",
		"key:alias":{
			"rRate":"rx /sec",
			"rWindow":"receive window",
			"rRedel":"redelivered",
			"rMaxDeliverySecs":"",
			"rDupsDet":"",
			"rDupIds":"", 
			"msgErrors":"",
			"jvmMB":"",
			
			// special values that can be added if desired, or for debugging
			"line num":"",

			// Computed values begin with "=". Currently the only supported type is "FIELDNAME /sec" for calculating rates
			"=msgErrors /sec": ""
		}},


	"Persistence Status:": {
		"fieldPrefix":"p.",
		"field:alias":{
			"numSnapshots":"",
			"lastSnapshotTime":"",
			"snapshotWaitTimeEwmaMillis":"",
			"commitTimeEwmaMillis":"",
			"lastSnapshotRowsChangedEwma":""
		}},
	
	"Missing Status:": {
		"fieldPrefix":"jms.",
		"field:alias":{
			"non-existent":"non-existent user value"
		}}


	}, 
	
	"userCharts": {

		// Each chart is described by "uniqueid": { "heading": "title", "labels": [keys], other options... }
		"jms_rates":{
			"heading":"JMS rates", 
			"labels":["jms.rx /sec", "jms.tx /sec"],
			"colors":["red", "pink", "orange"], 
			"ylabel":"Events/sec", 

			// For big numbers this often looks better than exponential notation
			"labelsKMB":true
		},
	
		// Colors are decided automatically by default, but can be overridden
		// This example shows how to put some series onto a y axis
		"persistence":{
			"heading":"Correlator persistence", 
			"labels":["p.numSnapshots", "p.snapshotWaitTimeEwmaMillis", "p.commitTimeEwmaMillis"],
			"colors":["red", "green", "blue"], 

			"ylabel":"Time (ms)", 
			"y2label":"Number of snapshots",
			"series": {"p.numSnapshots":{"axis":"y2"}}
		},


		// Example of overriding an existing chart
		"rates":{
			"heading":"Send/receive rate", "ylabel":"Events /sec", 
			"labels":["rx /sec", "jms.rx /sec"],
			"colors":["red", "orange"], 
			
			// For big numbers this often looks better than exponential notation
			"labelsKMB":true
		}
	}

}